//=============================================================================
//
// 衝突判定管理クラス [CollisionManager.h]
// Author : KEITA OHUCHI
//
//=============================================================================
#ifndef _COLLISION_MANAGER_H_
#define _COLLISION_MANAGER_H_

#include "Main.h"
#include "Shape.h"
#include "Collision.h"
#include "BoundingBox.h"


//-----------------------------------------------------------------------------
// STL使用宣言
//-----------------------------------------------------------------------------
using namespace std;
#include <list>


//-----------------------------------------------------------------------------
// 列挙型定義
//-----------------------------------------------------------------------------
typedef enum COLLISION_LAYER
{
	COLLISION_LAYER_NONE = 0,	// 当たり判定を取らないオブジェクト
	COLLISION_LAYER_PLAYER,		// プレイヤー
	COLLISION_LAYER_ENEMY,		// 敵
	COLLISION_LAYER_ITEM,		// アイテム
	COLLISION_LAYER_MAX			// 最大数
};


//-----------------------------------------------------------------------------
// クラス定義
//-----------------------------------------------------------------------------
class CollisionManager {
public:
	//=========================================================================
	// コンストラクタ
	//=========================================================================
	CollisionManager();
	//=========================================================================
	// デストラクタ
	//=========================================================================
	~CollisionManager();

	//=========================================================================
	// 初期化処理
	//=========================================================================
	HRESULT Init();
	//=========================================================================
	// 更新処理
	//=========================================================================
	void Update();
	//=========================================================================
	// 描画処理
	//=========================================================================
	void Draw();


	//=========================================================================
	// 衝突判定リストの追加処理
	//=========================================================================
	void AddList(COLLISION_LAYER layer, Shape *shape);
	//=========================================================================
	// 衝突判定リストの削除処理
	//=========================================================================
	void RemoveList(COLLISION_LAYER layer, Shape *shape);
	//=========================================================================
	// 衝突判定リストの全削除処理
	//=========================================================================
	void AllEraseList();

	//=========================================================================
	// 衝突判定処理
	//=========================================================================
	bool CheckCollision(Shape *shapeA, Shape *shapeB);


private:
	static bool		collisionLayer_[COLLISION_LAYER_MAX][COLLISION_LAYER_MAX];	// 衝突判定を行うかの識別
	list<Shape *>	objectList_[COLLISION_LAYER_MAX];							// オブジェクトリスト
	Collision		*checkTable_[SHAPE_TYPE_MAX][SHAPE_TYPE_MAX];				// 衝突判定関数テーブル

	bool			shapeRenderFlag_;		// 衝突判定領域の描画フラグ
};


#endif


// End of file