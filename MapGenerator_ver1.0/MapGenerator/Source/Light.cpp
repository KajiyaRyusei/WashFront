//=============================================================================
//
// ライトクラス [Light.cpp]
// Author : KEITA OHUCHI
//
//=============================================================================

#include "Main.h"
#include "Light.h"
#include "Manager.h"


//-----------------------------------------------------------------------------
// 静的メンバ変数
//-----------------------------------------------------------------------------
int Light::lightNum_ = 0;
Light *Light::array_[LIGHT_MAX] = {};


//=========================================================================
// コンストラクタ
//=========================================================================
Light::Light()
{
	// メンバ変数の初期化
	id_ = 0;

	++lightNum_;
}

//=========================================================================
// デストラクタ
//=========================================================================
Light::~Light()
{
	--lightNum_;
}

//=========================================================================
// 初期化処理
//=========================================================================
HRESULT Light::Init(D3DXVECTOR3 vec, int num)
{
	Renderer *renderer = Manager::GetInstance()->GetRenderer();
	LPDIRECT3DDEVICE9 device = renderer->GetDevice();
	
	// メンバ変数の初期化
	id_ = num;

	// ライトの情報を設定
	ZeroMemory(&data_, sizeof(D3DLIGHT9));  // ライト情報を０で初期化
	data_.Type = D3DLIGHT_DIRECTIONAL;  // ライトのタイプを[平行光源]に設定

	// ライトの色情報を設定
	data_.Diffuse = D3DXCOLOR(1.0f, 1.0f, 0.8f, 1.0f);

	// ライトの方向ベクトルを設定
	D3DXVec3Normalize((D3DXVECTOR3 *)&data_.Direction, &vec);  // 空間方向ベクトルの正規化

	// ライトを設定
	device->SetLight(num, &data_);  // ライトを設定
	device->LightEnable(num, TRUE);  // ライトを使用可能状態に

	//--------------------------------------------------------------------
	// ライトの描画を有効に
	// ここでやるべき・・・？
	device->SetRenderState(D3DRS_LIGHTING, TRUE);


	return S_OK;
}

//=========================================================================
// 解放処理
//=========================================================================
void Light::Release()
{
	delete array_[id_];
	array_[id_] = nullptr;

	// 配列の詰め直し
	for (int count = id_; count < lightNum_; ++count) {
		array_[count] = array_[count + 1];
	}
}

//=========================================================================
// 更新処理
//=========================================================================
void Light::Update()
{
}

//=========================================================================
// 全インスタンスの解放処理
//=========================================================================
void Light::ReleaseAll()
{
	for (int count = 0; count < LIGHT_MAX; ++count) {
		SafeDelete(array_[count]);
	}
}

//=========================================================================
// 生成処理
//=========================================================================
Light *Light::Create(D3DXVECTOR3 vec)
{
	int num = lightNum_;
	
	// 生成
	Light *light = new Light();
	// 格納
	array_[num] = light;
	// 初期化
	light->Init(vec, num);


	return light;
}


// End of file