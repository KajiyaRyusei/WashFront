//=============================================================================
//
// 境界球クラス [BoundingSphere.h]
// Author : KEITA OHUCHI
//
//=============================================================================
#ifndef _BOUNDING_SPHERE_H_
#define _BOUNDING_SPHERE_H_

#include "Shape.h"
#include "Renderer.h"


//-----------------------------------------------------------------------------
// クラス定義
//-----------------------------------------------------------------------------
class BoundingSphere : public Shape {
public:
	//=========================================================================
	// コンストラクタとデストラクタ
	//=========================================================================
	BoundingSphere() {};
	virtual ~BoundingSphere() {};

	//=========================================================================
	// 描画処理
	//=========================================================================
	void Draw();


	//=========================================================================
	// 形状の取得処理
	//=========================================================================
	SHAPE_TYPE GetType() { return SHAPE_TYPE_SPHERE; };
	//=========================================================================
	// 中心座標の取得処理
	//=========================================================================
	D3DXVECTOR3 GetPosition() { return position_; };
	//=========================================================================
	// 半径の取得処理
	//=========================================================================
	float GetRadius() { return radius_; };

	//=========================================================================
	// 中心座標の設定処理
	//=========================================================================
	void SetPosition(D3DXVECTOR3 pos) { position_ = pos; };
	//=========================================================================
	// 半径の設定処理
	//=========================================================================
	void SetRadius(float radius) { radius_ = radius; };


private:
	D3DXVECTOR3 position_;  // 中心座標
	float radius_;  // 半径
};


#endif


// End of file