//=============================================================================
//
// メッシュフィールドクラス [MeshField.h]
// Author : KEITA OHUCHI
//
//=============================================================================
#ifndef _MESH_FIELD_H_
#define _MESH_FIELD_H_

#include "Scene3D.h"


//-----------------------------------------------------------------------------
// クラス定義
//-----------------------------------------------------------------------------
class MeshField : public Scene3D {
public:
	//=========================================================================
	// コンストラクタとデストラクタ
	//=========================================================================
	MeshField(int priority = PRIORITY_FIELD);
	~MeshField();

	//=========================================================================
	// 初期化処理
	//=========================================================================
	virtual HRESULT Init(int block_num_x, int block_num_z,
		float block_size_x, float block_size_z,
		D3DXVECTOR3 pos, D3DXVECTOR3 rot);
	HRESULT Init(char *fileName, D3DXVECTOR3 position, D3DXVECTOR3 rotation);
	//=========================================================================
	// 更新処理
	//=========================================================================
	virtual void Update();
	//=========================================================================
	// 描画処理
	//=========================================================================
	virtual void Draw();
	
	//=========================================================================
	// 生成処理
	//=========================================================================
	static MeshField *Create(int block_num_x, int block_num_z,
		float block_size_x, float block_size_z,
		D3DXVECTOR3 pos, D3DXVECTOR3 rot);
	static MeshField *Create(char *fileName, D3DXVECTOR3 position, D3DXVECTOR3 rotation);

	//=========================================================================
	// 高さマップ生成処理
	//=========================================================================
	void CreateHeightMap(float *map);

	//=========================================================================
	// 高さの取得
	//=========================================================================
	float GetHeight(D3DXVECTOR3 pos);
	//=========================================================================
	// 高さの計算処理
	//=========================================================================	
	float GetHeightPolygon(D3DXVECTOR3 pos0, D3DXVECTOR3 pos1, D3DXVECTOR3 nor);

	//=========================================================================
	// 横幅の取得
	//=========================================================================
	float GetWidth() { return blockSizeX_ * blockNumX_; };
	//=========================================================================
	// 奥行の取得
	//=========================================================================
	float GetDepth() { return blockSizeZ_ * blockNumZ_; };


private:
	LPDIRECT3DINDEXBUFFER9	indexBuffer_;  // インデックスバッファ
	int						indexNum_;  // 頂点の総インデックス数
	int						vertexNum_;  // 総頂点数
	int						polygonNum_;  // 総ポリゴン数
	int						blockNumX_, blockNumZ_;  // ブロック数
	float					blockSizeX_, blockSizeZ_;  // ブロックサイズ
	D3DXVECTOR3				*faceNormal_;  // 各面の法線ベクトル
};


#endif


// End of file.