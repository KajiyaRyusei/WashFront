//=============================================================================
//
// プレイヤースーパークラス [Player.h]
// Author : KEITA OHUCHI
//
//=============================================================================
#ifndef _PLAYER_H_
#define _PLAYER_H_

#include "Main.h"
#include "Scene.h"


//-----------------------------------------------------------------------------
// 列挙型定義
//-----------------------------------------------------------------------------
// モーションの種類
enum MOTION_TYPE {
	MOTION_TYPE_NEUTRAL = (0),  // 待機状態
	//MOTION_TYPE_WALK,		   // 歩きモーション
	//MOTION_TYPE_PUNCH,		  // パンチモーション
	//MOTION_TYPE_DAMAGE,		 // 被ダメージモーション
	MOTION_TYPE_MAX
};


//-----------------------------------------------------------------------------
// 構造体定義
//-----------------------------------------------------------------------------
struct KEY {
	float posX;
	float posY;
	float posZ;
	float rotX;
	float rotY;
	float rotZ;
};


//-----------------------------------------------------------------------------
// クラス定義
//-----------------------------------------------------------------------------
class Player : public Scene {
public:
	//=========================================================================
	// コンストラクタとデストラクタ
	//=========================================================================
	Player(int priority = PRIORITY_PLAYER);
	virtual ~Player();

	//=========================================================================
	// 初期化処理
	//=========================================================================
	virtual HRESULT Init() = 0;
	//=========================================================================
	// 更新処理
	//=========================================================================
	virtual void Update() = 0;
	//=========================================================================
	// 描画処理
	//=========================================================================
	virtual void Draw() = 0;
	
	//=========================================================================
	// モーションの設定処理
	//=========================================================================
	virtual void SetMotion(MOTION_TYPE motionType) = 0;
	//=========================================================================
	// モーションの更新処理
	//=========================================================================
	virtual void UpdateMotion() = 0;

	//=========================================================================
	// 回転角の取得
	//=========================================================================
	D3DXVECTOR3 GetRotationation() { return rotation_; };
	//=========================================================================
	// IDの取得
	//=========================================================================
	int GetId() { return id_; };

	//=========================================================================
	// 回転角の設定
	//=========================================================================
	void SetRotation(D3DXVECTOR3 rotation) { rotation_ = rotation; };
	//=========================================================================
	// IDの設定
	//=========================================================================
	void SetId(int id) { id_ = id; };


protected:
	D3DXVECTOR3	rotation_;				// 回転角
	D3DXVECTOR3	destRotation_;			// 目標角
	D3DXVECTOR3	velocity_;				// 速度
	D3DXVECTOR3	frontVector_;			// 前方向ベクトル
	D3DXMATRIX	rotationMatrix_;		// 回転マトリクス
	D3DXMATRIX	worldMatrix_;			// ワールドマトリクス

	int			id_;					// 一意のID

	// 現在のモーション
	MOTION_TYPE motionType_;  // モーションの種類
	float motionTime_;  // モーションの時間
	int keyNum_;
	bool motionEndFlag_;  // モーションの終了フラグ
	bool motionLoopFlag_;  // モーションの繰り返しフラグ
	
	// 前のモーション
	MOTION_TYPE prevMotionType_;  // モーションの種類
	float prevMotionTime_;  // モーションの時間
	int prevKeyNum_;  // キーの最大数
	bool prevMotionLoopFlag_;  // モーションの繰り返しフラグ
	
	// モーションブレンド
	int frameBlend_;  // ブレンドをかけるフレーム数
	float motionTimeBlend_;  // ブレンドの時間
	bool motionBlendFlag_;  // モーションブレンドフラグ
};


#endif


// End of file