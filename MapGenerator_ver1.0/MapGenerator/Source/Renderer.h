//=============================================================================
//
// レンダラークラス [Renderer.h]
// Author : KEITA OHUCHI
//
//=============================================================================
#ifndef _RENDERER_H_
#define _RENDERER_H_


//-----------------------------------------------------------------------------
// インクルード
//-----------------------------------------------------------------------------
#include <Windows.h>
#include "d3dx9.h"


//-----------------------------------------------------------------------------
// ライブラリのリンク
//-----------------------------------------------------------------------------
#pragma comment (lib, "d3d9.lib")
#pragma comment (lib, "d3dx9.lib")
#pragma comment (lib, "dxguid.lib")
#pragma comment (lib, "winmm.lib")
#pragma comment (lib, "dxerr.lib")


//-----------------------------------------------------------------------------
// マクロ定義
//-----------------------------------------------------------------------------
#define FVF_VERTEX_2D (D3DFVF_XYZRHW | D3DFVF_DIFFUSE | D3DFVF_TEX1)
#define FVF_VERTEX_3D (D3DFVF_XYZ | D3DFVF_NORMAL | D3DFVF_DIFFUSE | D3DFVF_TEX1)

// 上記２Ｄポリゴン頂点フォーマットに合わせた構造体を定義
typedef struct
{
	D3DXVECTOR3 vtx;  // 頂点座標
	float rhw;  // テクスチャのパースペクティブコレクト用
	D3DCOLOR diffuse;  // 反射光
	D3DXVECTOR2 tex;  // テクスチャ座標
} VERTEX_2D;

// 上記３Ｄポリゴン頂点フォーマットに合わせた構造体
typedef struct
{
	D3DXVECTOR3 vtx;  // 頂点座標
	D3DXVECTOR3 nor;  // 法線ベクトル
	D3DCOLOR diffuse;  // 反射光
	D3DXVECTOR2 tex;  // テクスチャ座標
} VERTEX_3D;


//-----------------------------------------------------------------------------
// 前方宣言
//-----------------------------------------------------------------------------
class Camera;
class Light;


//-----------------------------------------------------------------------------
// クラス定義
//-----------------------------------------------------------------------------
class Renderer {
public:
	//=========================================================================
	// コンストラクタとデストラクタ
	//=========================================================================
	Renderer();
	~Renderer();

	//=========================================================================
	// 初期化処理
	//=========================================================================
	HRESULT Init(HINSTANCE hInstance, HWND hWnd, BOOL bWindow);
	//=========================================================================
	// 更新処理
	//=========================================================================
	void Update();
	//=========================================================================
	// 描画開始処理
	//=========================================================================
	bool BeginDraw();
	//=========================================================================
	// 描画終了処理
	//=========================================================================
	void EndDraw();


	//=========================================================================
	// デバイスへのアクセサ
	//=========================================================================
	LPDIRECT3DDEVICE9 GetDevice() { return device_; };

private:
	LPDIRECT3D9			direct3D_;  // Direct3Dオブジェクト
	LPDIRECT3DDEVICE9	device_;  // デバイスオブジェクト(描画に必要)
#ifdef _DEBUG
	bool				wireframe_;  // ワイヤーフレームモードフラグ
#endif
};


#endif


// End of file